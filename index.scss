* {
  padding: 0;
  margin: 0 auto;
  box-sizing: border-box;
}

body {
  background-color: #000;
  color: #fff;
  min-height: 100vh;
  display: grid;
  place-items: center;
  font-size: 40px;
  perspective: 50em;

  *:not(:empty) {
    transform-style: preserve-3d;
  }
}

input[type="checkbox"] {
  display: none;

  &:checked ~ .pendulum {
    --ry: 360deg;
  }
  &:checked ~ label {
    --ry: 180deg;
  }
}

label {
  position: fixed;
  top: calc(50% - 7em);
  cursor: pointer;
  transform: rotateY(var(--ry, 0));
  transition: transform 5s;

  &:hover > svg {
    opacity: 0.5;
  }

  svg {
    width: 3em;
    height: 2em;
    fill: #fff;
    opacity: 0.3;
  }
}

.pendulum {
  position: relative;
  transform: rotateY(var(--ry, 0deg));
  transition: transform 10s;
}

.topbar {
  position: absolute;
  top: -4em;

  & > div {
    position: absolute;
    width: 1em;
    height: var(--height, 1em);
    background-color: #420;
    transform: translate(-50%, -50%) var(--transform);
    box-shadow: 0 0 1em #000 inset;
    opacity: 0.9;

    &:nth-child(1) {
      --transform: translateZ(8em);
    }
    &:nth-child(2) {
      --transform: rotateY(180deg) translateZ(8em);
    }

    @for $i from 0 to 4 {
      &:nth-child(#{$i + 3}) {
        --height: 16em;
        --transform: rotateZ(#{$i * 90deg}) rotateX(90deg) translateZ(0.5em);
      }
    }
  }
}

.balls {
  position: absolute;
  top: -3.5em;
}

.ball {
  position: absolute;
  animation: ballSwing var(--duration, 0s) calc(var(--duration, 0s) * -0.5)
    infinite ease-in-out alternate;

  @keyframes ballSwing {
    from {
      transform: translateZ(var(--tz, 0)) rotateZ(-45deg);
    }
    to {
      transform: translateZ(var(--tz, 0)) rotateZ(45deg);
    }
  }

  .string {
    position: absolute;
    left: -1px;
    width: 2px;
    height: calc(var(--ty, 0) - 0.5em);
    background-color: hsla(var(--hue, 0), 75%, 75%, 0.1);
    transform: rotateX(var(--rx, -3deg));
    transform-origin: bottom;
    transform-style: preserve-3d;

    &:nth-child(2) {
      --rx: 3deg;
    }

    &::before,
    &::after {
      content: "";
      position: absolute;
      inset: 0;
      transform: rotateY(var(--ry, 120deg));
      background-color: inherit;
    }

    &::after {
      --ry: 240deg;
    }
  }

  & .face {
    position: absolute;
    animation: faceSwing var(--duration, 0s) calc(var(--duration, 0s) * -0.5)
      infinite ease-in-out alternate-reverse;
    transform-style: preserve-3d;

    @keyframes faceSwing {
      from {
        transform: translateY(var(--ty, 5em)) rotateZ(-45deg);
      }
      to {
        transform: translateY(var(--ty, 5em)) rotateZ(45deg);
      }
    }

    &::after {
      content: "";
      position: absolute;
      width: 1em;
      height: 1em;
      background-color: hsl(var(--hue, 0), 75%, 75%);
      background-image: radial-gradient(circle at top, #0000, #000);
      border-radius: 50%;
      box-shadow: 0 0 1em #000;
      transform: translate(-50%, -50%) rotateY(var(--ry, 720deg));
      transition: transform 10s;
    }
  }
}

.floor {
  position: absolute;
  top: 7em;
  width: 30em;
  height: 30em;
  background-color: #024;
  background-image: radial-gradient(#0000, #000 15em),
    repeating-conic-gradient(from 20deg, #000 0 90deg, #0000 0 180deg);
  background-size: 100% 100%, 2em 2em;
  transform: translate(-50%, -50%) rotateX(90deg);
}

.shadow {
  position: absolute;
  left: 50%;
  top: calc(50% + var(--tz, 0em));
  width: calc(6em - var(--ty, 0) * 0.2);
  height: calc(8em - var(--ty, 0) * 0.2);
  border-radius: 50%;
  background-image: radial-gradient(#000, #0000 50%);
  animation: shadow var(--duration) calc(var(--duration, 0s) * -0.5) infinite
    ease-in-out alternate;
  transform: translate(-50%, -50%);

  @keyframes shadow {
    from {
      transform: translate(-50%, -50%) translateX(10em);
    }
    to {
      transform: translate(-50%, -50%) translateX(-10em);
    }

    0%,
    100% {
      opacity: 0;
    }
    50% {
      opacity: 1;
    }
  }
}

.ball,
.shadow {
  @for $i from 0 to 15 {
    &:nth-child(#{$i + 1}) {
      --tz: #{$i - 7}em;
      --duration: #{30 / (30 - $i)}s; // #{math.div(36, 30 - $i)}s;
      --ty: #{6 + $i * 0.25}em;
      --hue: #{$i * 24};
    }
  }
}
